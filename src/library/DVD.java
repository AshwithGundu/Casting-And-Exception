/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library;

import enums.MPAA_Rating;
import interfaces.Library;

/**
 * DVD represents a type of compact disc able to store large amounts of data,
 * especially high-resolution audiovisual material
 *
 * @author Ashwith Gundu
 */
public class DVD extends Item implements Library {

    /**
     * Unique ID of DVD
     */
    private String dvdID;
    /**
     * MPAA rating of DVD
     */

    private MPAA_Rating rating;
    /**
     * Storage capacity of DVD in GB
     */

    private double storageCapacity;

    /**
     * Initializes the variables of this class and the super class. Assign
     * generateUniqueID() to dvdID.
     *
     * @param rating - Rating of DVD
     * @param storageCapacity - Storage Capacity of DVD
     * @param title - Title of DVD
     */
    public DVD(MPAA_Rating rating, double storageCapacity, String title) {
        super(title);
        generateUniqueID();
        this.rating = rating;
        this.storageCapacity = storageCapacity;
    }

    /**
     * This method generates rack identification number to keep the DVD at a
     * particular location in the library. <br>The rack ID is generated by using
     * the following algorithm. <br>Place the first character after the next two
     * characters of DVD title. <br>Repeat the process for each subsequent group
     * of three characters. <br>Ignore any group of fewer than 3 chars at end.
     * At last append the storage capacity as shown below.
     *
    
     * @return - String Rack ID
     */
    @Override
    public String generateRackID() {

int check = getTitle().length(),index=0;
        char[] answer=getTitle().toCharArray();
        char a;
   while(check>=3){
    check=check-3;
    a=answer[index];
    answer[index]=answer[index+1];
    answer[index+1]=a;
    index++;
     a=answer[index];
    answer[index]=answer[index+1];
    answer[index+1]=a;
     index++;
     index++;
    }
    String ans=new String(answer);
    ans=ans.substring(0,index)+"."+this.getStorageCapacity();
    return ans;
    }

    /**
     * This method concatenates LIBRARY_CODE, "_DVD_", counter and returns it.
     *
     * @return - String Unique ID of DVD
     */
    @Override
    public String generateUniqueID() {
        dvdID = LIBRARY_CODE + "_DVD_" + counter;
        return dvdID;
    }

    /**
     * Sets MPAA rating of DVD
     *
     * @param rating - Rating of DVD
     */
    public void setRating(MPAA_Rating rating) {
        this.rating = rating;
    }

    /**
     * Sets the storage capacity of DVD
     *
     * @param storageCapacity - Storage capacity of DVD
     */
    public void setStorageCapacity(double storageCapacity) {
        this.storageCapacity = storageCapacity;
    }

    /**
     * Returns MPAA rating of DVD
     *
     * @return - MPAA_Rating rating of DVD
     */
    public MPAA_Rating getRating() {
        return rating;
    }

    /**
     * Returns the storage capacity of DVD
     *
     * @return - double Storage capacity of DVD
     */
    public double getStorageCapacity() {
        return storageCapacity;
    }

    /**
     * Invoke super.toString() and concatenate dvdID, rating and storageCapacity
     * <br>For example:<br>Title: HarryPoter1, DVD ID: NWM_DVD_3, Rating: R,
     * Storage Capacity: 1.2
     *
     * @return - String To string representation of DVD
     */
    @Override
    public String toString() {
        return "Title: " + this.getTitle().toLowerCase() + ", Available: " + this.isAvailable() + ", DVD ID: " + dvdID
                + ", Rating: " + this.rating + ", Storage Capacity: " + this.storageCapacity + "\n";
    }
}
